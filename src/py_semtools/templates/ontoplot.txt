<% 	
	import os
	import pylab
	import pandas as pd
	import matplotlib.pyplot as plt
	import warnings
	import math

	def draw_static_rontoplot(data, plotter_list):
		fig = plotter_list['plt'].figure(figsize=(12,12))
		ax = fig.add_subplot(projection='polar')

		for color in data["colors"].unique():
			d = data[data["colors"] == color]
			scatter = ax.scatter(d["arc_values"], d["radius_values"], s=d["sizes"], color=color, label=color_legend[color])
		
		# Legend for colors
		legend1 = ax.legend(loc="upper right", fontsize="7")
		ax.add_artist(legend1)
		handles, labels = scatter.legend_elements(prop="sizes", alpha=0.6)
		legend2 = ax.legend(handles, labels, loc="lower right", title="Frequency", fontsize="7")
		
		# Other customizations
		ax.set_facecolor("white")
		ax.set_theta_zero_location('N')
		ax.set_theta_direction(-1)
		ax.tick_params(axis='y', colors='white')
		ax.grid(False)
		ax.set_xticklabels([])
		ax.set_yticklabels([])

	def draw_dynamic_rontoplot(data, plotter_list):
		fig = plotter_list['px'].scatter_polar(data, r="radius_values", theta="arc_values", color="colors", size="sizes", hover_name="hp_names", title=title, width=width, height=height)
		return fig

	plotter.hash_vars[f"{id}_df"] = pd.DataFrame(plotter.hash_vars[id][1:], columns=plotter.hash_vars[id][0])
	if dynamic:
		plotter.hash_vars[f"{id}_df"]["arc_values"] = plotter.hash_vars[f"{id}_df"]["arc_values"] / (2*math.pi) * 360
		plotter.hash_vars[f"{id}_df"]["colors"] = plotter.hash_vars[f"{id}_df"]["colors"].apply(lambda color: color_legend[color])
	
	plotter_to_use = draw_dynamic_rontoplot if dynamic else draw_static_rontoplot
%>

${plotter.static_plot_main(id=f"{id}_df", dynamic=dynamic, raw=True, header=True, row_names=False, var_attr=[0],  plotting_function = plotter_to_use, height=height, width=width, title=title)}