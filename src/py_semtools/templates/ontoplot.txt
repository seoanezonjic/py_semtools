<% 	
	import os
	import pylab
	import pandas as pd
	import matplotlib.pyplot as plt
	import warnings
	import math

	def to_css_rgb(color):
		red, green, blue, *alpha = list(map(lambda channel: round(channel*255), color))
		return f"rgb({red},{green},{blue})"

	def draw_static_rontoplot(data, plotter_list):
		fig = plotter_list['plt'].figure(figsize=(12,12))
		ax = fig.add_subplot(projection='polar')

		for color in data["colors"].unique():
			d = data[data["colors"] == color]
			scatter = ax.scatter(d["arc_values"], d["radius_values"], s=d["sizes"], color=color, label=color_legend[color])
		
		# Legend for colors
		legend1 = ax.legend(loc="upper right", fontsize="7")
		ax.add_artist(legend1)
		handles, labels = scatter.legend_elements(prop="sizes", alpha=0.6)
		legend2 = ax.legend(handles, labels, loc="lower right", title="Frequency", fontsize="7")
		
		# Other customizations
		ax.set_facecolor("white")
		ax.set_theta_zero_location('N')
		ax.set_theta_direction(-1)
		ax.tick_params(axis='y', colors='white')
		ax.grid(False)
		ax.set_xticklabels([])
		ax.set_yticklabels([])

	def draw_dynamic_rontoplot(data, plotter_list):
		fig = plotter_list['px'].scatter_polar(data, r="radius_values", theta="arc_values", size="sizes", hover_name="hp_names",
					color="colors", color_discrete_map = color_legend, title=title, width=width, height=height)
		fig.update_layout(polar = dict(angularaxis = dict(showticklabels = False)))
		return fig

	plotter.hash_vars["ontoplot_table_format_df"] = pd.DataFrame(plotter.hash_vars["ontoplot_table_format"][1:], columns=plotter.hash_vars["ontoplot_table_format"][0])
	if dynamic:
		plotter.hash_vars["ontoplot_table_format_df"]["arc_values"] = plotter.hash_vars["ontoplot_table_format_df"]["arc_values"] / (2*math.pi) * 360
		plotter.hash_vars["ontoplot_table_format_df"]["colors"] = plotter.hash_vars["ontoplot_table_format_df"]["colors"].apply(lambda color: color_legend[color])
		px_color_legend = {label: to_css_rgb(rgb) for rgb, label in color_legend.items()}
		color_legend.clear()
		color_legend.update(px_color_legend)
	
	plotter_to_use = draw_dynamic_rontoplot if dynamic else draw_static_rontoplot
%>

${plotter.static_plot_main(id="ontoplot_table_format_df", dynamic=dynamic, raw=True, header=True, row_names=False, var_attr=[0],  plotting_function = plotter_to_use, height=height, width=width, title=title)}