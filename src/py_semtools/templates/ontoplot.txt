<% 	
	import os
	import numpy as np
	import pylab
	import pandas as pd
	import matplotlib.pyplot as plt
	import warnings
	import math

	def to_css_rgb(color):
		red, green, blue, *alpha = list(map(lambda channel: round(channel*255), color))
		return f"rgb({red},{green},{blue})"

	def draw_static_rontoplot(data, plotter_list):
		fig = plotter_list['plt'].figure(figsize=(12,12))
		ax = fig.add_subplot(projection='polar')

		for color in data["colors"].unique():
			d = data[data["colors"] == color]
			scatter = ax.scatter(d["arc_values"], d["radius_values"], s=d["sizes"], color=color, label=color_legend[color], alpha=d["alphas"])
		
		# Legend for colors
		legend1 = ax.legend(loc="upper right", fontsize="7")
		ax.add_artist(legend1)
		handles, labels = scatter.legend_elements(prop="sizes", alpha=0.6)
		legend2 = ax.legend(handles, labels, loc="lower right", title="Frequency", fontsize="7")
		
		# Other customizations
		ax.set_facecolor("white")
		ax.set_theta_zero_location('N')
		ax.set_theta_direction(-1)
		ax.tick_params(axis='y', colors='white')
		ax.grid(False)
		ax.set_xticklabels([])
		ax.set_yticklabels([])

	def draw_dynamic_rontoplot(data, plotter_list):
		#Previous version of the function
		#alphas = data['alphas']
		#fig = plotter_list['px'].scatter_polar(data, r="radius_values", theta="arc_values", size="sizes", hover_name="hp_names", 
		#			opacity = alphas, color="colors", color_discrete_map = color_legend, title=title, width=width, height=height)
		
		#hover_debug="%{customdata}<br>radius_values: %{r:.2f}<br>arc_values: %{theta:.2f}<br>size: %{marker.size:.2f}<br>alpha: %{marker.opacity}"
		hover="%{customdata[0]}<br>Frequency in profiles: %{customdata[1]:.5f}"
		
		fig = plotter_list['go'].Figure()
		for branch, phens in data.groupby("colors", sort=False): 
			fig.add_trace(plotter_list['go'].Scatterpolargl(
				r = phens.radius_values,
				theta = phens.arc_values,
				name = branch,
				marker=dict(size=phens.sizes, color=color_legend[branch], opacity=phens.alphas, line=dict(width=0)),
				customdata=list(phens[['hp_names', 'freqs']].to_numpy()),
				hovertemplate = hover
				))
		fig.update_traces(mode="markers")
		fig.update_layout( title = dict(text=title), 
		                   legend = dict(bordercolor="Black", borderwidth=2, title_font_family="Times New Roman", bgcolor="LightSteelBlue",
						   				 itemsizing= 'constant',
        								 font = dict(family="Courier", size=12, color="black")), 
						   polar = dict(angularaxis = dict(showticklabels = False, rotation = 90, direction = "clockwise")) )
		return fig

	plotter.hash_vars["ontoplot_table_format_df"] = pd.DataFrame(plotter.hash_vars["ontoplot_table_format"][1:], columns=plotter.hash_vars["ontoplot_table_format"][0])
	if dynamic:
		plotter.hash_vars["ontoplot_table_format_df"]["arc_values"] = plotter.hash_vars["ontoplot_table_format_df"]["arc_values"] / (2*math.pi) * 360
		plotter.hash_vars["ontoplot_table_format_df"]["colors"] = plotter.hash_vars["ontoplot_table_format_df"]["colors"].apply(lambda color: color_legend[color])
		px_color_legend = {label: to_css_rgb(rgb) for rgb, label in color_legend.items()}
		color_legend.clear()
		color_legend.update(px_color_legend)
	
	plotter_to_use = draw_dynamic_rontoplot if dynamic else draw_static_rontoplot
%>

<style>
.legendpoints .scatterpts {
  opacity: 1 !important;
}
</style>
${plotter.static_plot_main(id="ontoplot_table_format_df", dynamic=dynamic, raw=True, header=True, row_names=False, var_attr=[0],  plotting_function = plotter_to_use, height=height, width=width, title=title)}