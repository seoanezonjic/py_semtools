<%
    root_term = "HP:0000118"
    ref_term = "HP:0000118"

    def get_ontoplot_call(dyn, freq, fix, guide, root, ref, height=800, width=800):
        return f"""<code>plotter.ontoplot(ontology="ontology", root_node="{root}", reference_node="{ref}", dpi = 300,
                            height={height}, width={width}, title=f"Profiles signature", mode = "{dyn}", 
                            freq_by="{freq}", fix_alpha={fix}, guide_lines="{guide}")</code>"""
    def get_ontoplot(dyn, freq, fix, guide, root, ref, height=800, width=800):
        return plotter.ontoplot(ontology="ontology", root_node=root, reference_node=ref,
                            height=height, width=width, title=f"Profiles signature", mode = dyn, 
                            freq_by=freq, fix_alpha=fix, guide_lines=guide)
%>

<div style="width: 90%; background-color:#ecf0f1; margin: 0 auto;"> 
    <h1 style="text-align: center; background-color:#d6eaf8">HPO annotations distribution</h1>
    <div style="overflow: hidden">
        ${plotter.ontodist(ontology="ontology", dist_type=['count', 'perc'], height=800, width=800)}
    </div>

    <div style="overflow: hidden">
        ${plotter.ontoICdist(ontology="ontology", dist_type=['term', 'prof'], height=800, width=800)}
    </div>
    
    <div style="overflow: hidden">
        ${ plotter.makeTermFreqTable(ontology="ontology", height=800, width=800)}
    </div>
    
    <div style="overflow: hidden">
        ${ plotter.plotProfRed(ontology="ontology", height=800, width=800)}
    </div>

    <div style="overflow: hidden">
        ${plotter.plotClust(ontology="ontology", method_name="lin", height=800, width=800)}
    </div>

</div>

${ plotter.create_title(f'Ontoplot. Different calls examples', id='div_from', 
                        hlevel=1, indexable=False, clickable=True, t_id='div_to', clickable_text = '(Click me)') }

<%  
    content = "<div style=\"width: 90%; background-color:#ecf0f1; margin: 0 auto;\">"

    content += "Dynamic ontoplot, frequency by size and opacity, opacity low values fixed by cubic root, guide lines set by ontology term points" + "<br>"
    content += get_ontoplot_call(dyn="dynamic", freq="both", fix="\"cubic_root\"", guide="ont", root=root_term, ref=ref_term) + "<br>"
    content += get_ontoplot(dyn="dynamic", freq="both", fix="cubic_root", guide="ont", root=root_term, ref=ref_term) + "<br>"
 
    content += "Dynamic ontoplot, frequency by size, guide lines set by concentric lines at each level of the ontology"+ "<br>"
    content += get_ontoplot_call(dyn="dynamic", freq="size", fix="\"none\"", guide="grid", root=root_term, ref=ref_term) + "<br>"
    content += get_ontoplot(dyn="dynamic", freq="size", fix="none", guide="grid", root=root_term, ref=ref_term) + "<br>"
    
    content += "Dynamic ontoplot, frequency by opacity, no guide lines used" + "<br>"
    content += get_ontoplot_call(dyn="dynamic", freq="alpha", fix="\"none\"", guide="none", root=root_term, ref=ref_term) + "<br>"
    content += get_ontoplot(dyn="dynamic", freq="alpha", fix="none", guide="none", root=root_term, ref=ref_term) + "<br>"


    content += "Static ontoplot, frequency by size and opacity, opacity low values fixed by cubic root, guide lines set by ontology term points" + "<br>"
    content += get_ontoplot_call(dyn="static", freq="both", fix="\"bins\"", guide="ont", root=root_term, ref=ref_term) + "<br>"
    content += get_ontoplot(dyn="static", freq="both", fix="bins", guide="ont", root=root_term, ref=ref_term) + "<br>"
    
    content += "Static ontoplot, frequency by size, guide lines set by concentric lines at each level of the ontology" + "<br>"
    content += get_ontoplot_call(dyn="static", freq="size", fix="\"none\"", guide="grid", root=root_term, ref=ref_term) + "<br>"
    content += get_ontoplot(dyn="static", freq="size", fix="none", guide="grid", root=root_term, ref=ref_term) + "<br>"
    
    content += "Static ontoplot, frequency by opacity, no guide lines used" + "<br>"
    content += get_ontoplot_call(dyn="static", freq="alpha", fix="lambda x: x**(1/3)", guide="none", root=root_term, ref=ref_term) + "<br>"
    content += get_ontoplot(dyn="static", freq="alpha", fix=lambda x: x**(1/3), guide="none", root=root_term, ref=ref_term) + "<br>"

    content += "Dynamic ontoplot centered in HP:0012443 (Abnormal brain morphology), using childs of HP:0012443 as main branches colors, frequency by size and opacity, opacity low values fixed by cubic root, guide lines set by ontology term points" + "<br>"
    content += get_ontoplot_call(dyn="dynamic", freq="both", fix="\"cubic_root\"", guide="ont", root="HP:0012443", ref="HP:0012443") + "<br>"
    content += get_ontoplot(dyn="dynamic", freq="both", fix="cubic_root", guide="ont", root="HP:0012443", ref="HP:0012443") + "<br>"
    content += "</div>"

    cv_height, cv_width = 700, 1400
    block1 = "Canvasxpress ontoplot, frequency by size (only mode), guide lines set by ontology term points"+ "<br>"
    block1 += get_ontoplot_call(dyn="canvas", freq="size", fix="\"none\"", guide="ont", root=root_term, ref=ref_term, height=cv_height, width=cv_width) + "<br>"
    content += plotter.prettify_div(block1) + "<br>"
    content += plotter.prettify_div(get_ontoplot(dyn="canvas", freq="size", fix="none", guide="ont", root=root_term, ref=ref_term, height=cv_height, width=cv_width) + "<br>")

    block2 = "Canvasxpress ontoplot, frequency by size (only mode), guide lines set by concentric lines at each level of the ontology"+ "<br>"
    block2 += get_ontoplot_call(dyn="canvas", freq="size", fix="\"none\"", guide="grid", root=root_term, ref=ref_term, height=cv_height, width=cv_width) + "<br>"
    content += plotter.prettify_div(block2) + "<br>"
    content += plotter.prettify_div(get_ontoplot(dyn="canvas", freq="size", fix="none", guide="grid", root=root_term, ref=ref_term, height=cv_height, width=cv_width) + "<br>")
%>
${ plotter.create_collapsable_container('div_to', content, display="visible") }